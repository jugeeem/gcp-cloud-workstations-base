steps:
  # Claude Code設定ファイルのコピー
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p claude-code-setup
        cat > claude-code-setup/claude-client.js << 'EOF'
        /**
         * Claude Code Node.js Client
         */
        import Anthropic from '@anthropic-ai/sdk';
        import dotenv from 'dotenv';
        
        dotenv.config();
        
        class ClaudeClient {
            constructor() {
                this.apiKey = process.env.ANTHROPIC_API_KEY;
                
                if (!this.apiKey) {
                    throw new Error('ANTHROPIC_API_KEY環境変数が設定されていません');
                }
                
                this.anthropic = new Anthropic({
                    apiKey: this.apiKey,
                });
            }
        
            async sendMessage(message, model = 'claude-3-sonnet-20240229') {
                try {
                    const response = await this.anthropic.messages.create({
                        model: model,
                        max_tokens: 4000,
                        messages: [{
                            role: 'user',
                            content: message
                        }]
                    });
                    return response.content[0].text;
                } catch (error) {
                    console.error('Error sending message to Claude:', error);
                    throw error;
                }
            }
        
            async generateCode(request, language = 'javascript') {
                const prompt = `あなたは優秀なプログラマーです。以下の要求に基づいて、${language}でコードを生成してください。\n\n要求: ${request}\n\nコードのみを返してください。説明は不要です。`;
                return await this.sendMessage(prompt);
            }
        
            async reviewCode(code, language = 'javascript') {
                const prompt = `以下の${language}コードをレビューして、改善点や問題点を指摘してください：\n\n\`\`\`${language}\n${code}\n\`\`\`\n\n改善提案も含めて回答してください。`;
                return await this.sendMessage(prompt);
            }
        }
        
        export default ClaudeClient;
        EOF

  # Dockerイメージのビルド
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${_TAG}',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:latest',
      '.'
    ]

  # Artifact Registryへのプッシュ
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push', 
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${_TAG}'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push', 
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:latest'
    ]

# ビルドオプション
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# 置換変数のデフォルト値
substitutions:
  _REGION: 'asia-northeast1'
  _REPOSITORY: 'cloud-workstations'
  _IMAGE_NAME: 'custom-workstation'
  _TAG: '${BUILD_ID}'

# タイムアウト設定
timeout: '1800s'
